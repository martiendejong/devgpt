/*
// See https://aka.ms/new-console-template for more information
using DevGPT.NewAPI;
using OpenAI_API.Chat;


var appFolderStoreConfig = new DocumentStoreConfig(@"c:\stores\maasaiinvest\htdocs", @"c:\stores\maasaiinvest\embeddings", "");
var store = new DocumentStore(appFolderStoreConfig);
await store.UpdateEmbeddings();
store.SaveEmbeddings();
var prompt =
@"Your task is to build a webapplication to handle administration for maasai investments, a livestock investment project.
Each request represents the creation or modifcation of one file for the project.
The project uses PHP. It will be protected with a login using a htaccess file.
The application has the following files.
deposit.php - a form where a deposit by an investor can be registered. the deposit record has a depositor name and an amount in kenyan shillings and a date and a transaction cost. there is a 100 shillings transaction cost per deposit. the form only has inputs investor name, date and deposit amout.
withdraw.php - a form where a withdrawal by an investor can be registered. a withdrawal is a negative deposit and has no transaction cost. the withdrawal form has an amount and date and investor.
investors.php - shows the list of investors with per investor the deposits, withdrawals, animals and the total value of the investment of the investor. there is a deposit button and withdrawal button for each investor that goes to the deposit or withdrawal form with the investor name already filled in. there is a button new investor that goes to the deposit form with the name not filled in.
purchase.php - a form where an animal can be purchased. an animal record has a purchase date, purchase price, investor, caretaker, animal type (goat sheep cow or chicken), animal name, animal id which is autogenerated nr, insurance price which is 10% of the cost of the animal and sell date, sell price and market fee which is 200 shillings. the purchase form has an investor, animal type, animal name, caretaker, price, purchase date.
sell.php - a form where an animal can be sold. the form has an animal id, sell price, sell date. the animal record will be updated with the data.
expense.php - a form where an expense can be registered. an expense record has a date, price, description
expenses.php - lists the expenses. with a button to add a new expense.
deposits.json - the deposit and withdrawal records
animals.json - the animals
expenses.json - the expenses
investments.json - a summary of the investments which is updated when a deposit or withdrawal is made or when an animal is sold. when an animal is sold the profit is: sell price - buy price - market fee - (sum of expenses per month divided by the number of animals in that month) the profit is added to the investor's amount.
company.json - a list of all the profits per sold animal. this file gets updated every time an animal is sold and a record with the final profit / 3, the animal name, the caretaker name and date of sale is added.
caretakers.json - a list of all the caretakers. this file gets updated every time an animal is sold and a record with the final profit / 3, the animal name, the caretaker name and date of sale is added.
caretakers.php - shows a list of all the caretakers, per caretaker a list of all the animals they have and also a list of all the animals that are sold at this caretaker, for which the caretakers.json is used. the total profit should be shown as well for each caretaker.
addcaretaker.php - add a caretaker consisting of form with a name only.
company.php - shows the profits of the company in a long list and a total.
each page should contain links to the investors, the animals, the caretakers, the company and the expenses page.
when a deposit is made the whole deposit minus the 100 shillings fee is added to the investor investments. when an animal is sold the final profit / 3 should be added to the investor investments.
the pages should have a mobile friendly modern layout. the layout on all pages should be similar.
";
//.htaccess - protects the whole folder with a password
var promptMessages = new List<ChatMessage>() { new ChatMessage(ChatMessageRole.System, prompt) };
var generator = new DocumentGenerator(store, promptMessages, appFolderStoreConfig.OpenAiApiKey, @"c:\stores\maasaiinvest\log");
store.SaveEmbeddings();

//await generator.UpdateStore("create deposit.php");
//await generator.UpdateStore("create withdraw.php");
//await generator.UpdateStore("create investors.php");
//await generator.UpdateStore("create purchase.php");
//await generator.UpdateStore("create sell.php");
//await generator.UpdateStore("create expense.php");
//await generator.UpdateStore("create .htaccess");
//await generator.UpdateStore("Verify that the application is created correctly and update files where neccessary");
//await generator.UpdateStore("create caretakers.php");
//await generator.UpdateStore("create addcaretaker.php");
//await generator.UpdateStore("create company.php");

//await generator.UpdateStore("make sure deposit.php has the right menu and mobile layout");
//await generator.UpdateStore("make sure withdraw.php has the right menu and mobile layout");
//await generator.UpdateStore("make sure investors.php has the right menu and mobile layout");
//await generator.UpdateStore("make sure purchase.php has the right menu and mobile layout");
//await generator.UpdateStore("make sure sell.php has the right menu and mobile layout");
//await generator.UpdateStore("make sure expense.php has the right menu and mobile layout");
//await generator.UpdateStore("make sure caretakers.php has the right menu and mobile layout");
//await generator.UpdateStore("make sure addcaretaker.php has the right menu and mobile layout");
//await generator.UpdateStore("make sure company.php has the right menu and mobile layout");
//await generator.UpdateStore("create a tasks.txt. the first task: verify that all pages have a similar layout and for each page that doesnt have this layout create a task to update the layout for that page");
//await generator.UpdateStore("add a task: verify that all pages have a mobile friendly layout and for each page that doesnt have this layout create a task to update the layout for that page");
//await generator.UpdateStore("add a task: verify that all pages have the right menu items and for each page that doesnt have the right menu items create a task to update the menu for that page");
//await generator.UpdateStore("add a task: verify that all form input where an item is picked, like an animal by id, investor or caretaker or other items that are in a list that this input is a dropdown. for each page where this is not the case create a task to make it a dropdown");
//await generator.UpdateStore("add a task: verify that no pages have errors when running them and for each page that does have errors create a task to update the code for that page to make sure no errors exist");
await generator.UpdateStore("verify if there is anything that still needs to be done and if so make tasks for that");

for (var j = 0; j < 10; ++j)
{
    for (var i = 0; i < 3; ++i)
    {
        await generator.UpdateStore("pick the first task from tasks.txt that is not marked done, execute it and mark it as done");
    }
    await generator.UpdateStore("pick up to three tasks that are marked done, verify if they are really done and if there is anything still not good remove the done label and add a rework comment describing what still needs to be done. if the task is really done remove it completely from the list");
}

await generator.UpdateStore("pick up to three tasks that are marked done, verify if they are really done and if there is anything still not good remove the done label and add a rework comment describing what still needs to be done. if the task is really done remove it completely from the list");
await generator.UpdateStore("pick up to three tasks that are marked done, verify if they are really done and if there is anything still not good remove the done label and add a rework comment describing what still needs to be done. if the task is really done remove it completely from the list");

await generator.UpdateStore("verify if there is anything that still needs to be done and if so make tasks for that");

for (var i = 0; i < 3; ++i)
{
    await generator.UpdateStore("pick the first task from tasks.txt that is not marked done, execute it and mark it as done");
}
await generator.UpdateStore("pick up to three tasks that are marked done, verify if they are really done and if there is anything still not good remove the done label and add a rework comment describing what still needs to be done. if the task is really done remove it completely from the list");
await generator.UpdateStore("pick up to three tasks that are marked done, verify if they are really done and if there is anything still not good remove the done label and add a rework comment describing what still needs to be done. if the task is really done remove it completely from the list");
*/