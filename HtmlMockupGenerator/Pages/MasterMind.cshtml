@page
@model IndexModel
@{
    ViewData["Title"] = "HTML Mockup Generator";
}
<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    .main-content {
        flex: 1 1 auto;
        display: flex;
        min-height: 0;
        height: 100%;
        overflow: hidden;
    }
    .chat-panel {
        width: 100%;
        max-width: 300px;
        min-width: 200px;
        border-right: 1px solid #ccc;
        background: #fff;
        padding: 0;
        display: flex;
        flex-direction: column;
        height: 100%;
        align-items: flex-start;
    }
    .user-info {
        padding: 1rem;
        border-bottom: 1px solid #eee;
        background: #f8f9fa;
        width: 100%;
    }
    .limit-info {
        padding: 0.5rem 1rem;
        background: #e3f2fd;
        border-bottom: 1px solid #ccc;
        font-size: 0.9rem;
        width: 100%;
    }
    .limit-info.warning {
        background: #fff3cd;
        color: #856404;
    }
    .limit-info.danger {
        background: #f8d7da;
        color: #721c24;
    }
    .limit-info.dev-mode {
        background: #d1ecf1;
        color: #0c5460;
    }
    .chat-history {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        margin-bottom: 0.5rem;
        width: 100%;
    }
    .chat-input {
        display: flex;
        padding: 0.5rem 1rem 1rem 1rem;
        background: #fff;
        width: 100%;
    }
    .chat-input textarea {
        flex: 1;
        resize: none;
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 0.5rem;
        font-size: 1rem;
    }
    .chat-input button {
        margin-left: 0.5rem;
        padding: 0.5rem 1rem;
        font-size: 1rem;
        border: none;
        background: #222;
        color: #fff;
        border-radius: 4px;
        cursor: pointer;
        transition: background 0.2s;
    }
    .chat-input button:hover {
        background: #444;
    }
    .chat-input button:disabled {
        background: #ccc;
        cursor: not-allowed;
    }
    .html-panel {
        flex: 1;
        height: 100%;
        min-width: 0;
        padding: 0;
        background: #f9f9f9;
        display: flex;
        position: relative;
    }
    .html-iframe {
        border: none;
        width: 100%;
        height: 100%;
        background: #fff;
        transition: opacity 0.3s;
    }
    .html-iframe.loading {
        opacity: 0.5;
    }
    .loading-overlay {
        position: absolute;
        top: 0; left: 0; right: 0; bottom: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        pointer-events: none;
        z-index: 2;
    }
    .spinner {
        border: 4px solid #eee;
        border-top: 4px solid #222;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
    }
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    @@media (max-width: 900px) {
        .chat-panel { max-width: 200px; }
    }
    @@media (max-width: 700px) {
        .main-content {
            flex-direction: column;
        }
        .chat-panel {
            width: 100%;
            max-width: none;
            min-width: 0;
            border-right: none;
            border-bottom: 1px solid #ccc;
            height: auto;
            max-height: 50vh;
        }
        .html-panel {
            min-height: 50vh;
        }
    }
    @@media (max-width: 600px) {
        .main-content {
            flex-direction: column;
            height: 100%;
        }
        .chat-panel {
            width: 100%;
            max-width: none;
            min-width: 0;
            border-right: none;
            border-bottom: 1px solid #ccc;
            height: auto;
            max-height: none;
        }
        .html-panel {
            min-height: 0;
            height: 100%;
            padding: 0;
        }
    }
</style>

@if (Model.RequireAuthentication && !User.Identity?.IsAuthenticated == true)
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h3 class="text-center">Welkom bij HTML Mockup Generator</h3>
                    </div>
                    <div class="card-body text-center">
                        <p class="mb-4">Log in met je Google account om HTML mockups te genereren.</p>
                        <p class="text-muted mb-4">Je kunt maximaal @Model.RemainingGenerations pagina's per dag genereren.</p>
                        
                        <a href="/Account/Login" class="btn btn-primary btn-lg">
                            <svg width="20" height="20" viewBox="0 0 24 24" class="me-2">
                                <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                                <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                                <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                                <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                            </svg>
                            Inloggen met Google
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="main-content">
        <div class="chat-panel">
            @if (Model.RequireAuthentication)
            {
                <div class="user-info">
                    <div class="d-flex align-items-center">
                        @if (!string.IsNullOrEmpty(User.FindFirst("picture")?.Value))
                        {
                            <img src="@User.FindFirst("picture")?.Value" alt="Profile" class="rounded-circle me-2" style="width: 32px; height: 32px;" />
                        }
                        <div>
                            <div class="fw-bold">@User.FindFirst("name")?.Value</div>
                            <div class="text-muted small">@User.FindFirst("email")?.Value</div>
                        </div>
                    </div>
                </div>
            }
            
            <div class="limit-info @(Model.RequireAuthentication ? (Model.RemainingGenerations <= 2 ? "danger" : Model.RemainingGenerations <= 5 ? "warning" : "") : "dev-mode")">
                <div class="d-flex justify-content-between align-items-center">
                    <span>@(Model.RequireAuthentication ? "Vandaag gebruikt:" : "Development mode:")</span>
                    <span class="fw-bold">@(Model.RequireAuthentication ? $"{10 - Model.RemainingGenerations}/10" : "Unlimited")</span>
                </div>
                @if (Model.RequireAuthentication)
                {
                    <div class="progress mt-1" style="height: 4px;">
                        <div class="progress-bar @(Model.RemainingGenerations <= 2 ? "bg-danger" : Model.RemainingGenerations <= 5 ? "bg-warning" : "bg-success")" 
                             style="width: @((10 - Model.RemainingGenerations) * 10)%"></div>
                    </div>
                }
                else
                {
                    <div class="small text-muted mt-1">Authenticatie uitgeschakeld voor development</div>
                }
            </div>
            
            <div class="chat-history" id="chatHistory"></div>
            <form class="chat-input" id="chatForm" autocomplete="off">
                <textarea id="chatMessage" rows="2" placeholder="Typ een bericht..." @(Model.RequireAuthentication && Model.RemainingGenerations <= 0 ? "disabled" : "")></textarea>
                <button type="submit" @(Model.RequireAuthentication && Model.RemainingGenerations <= 0 ? "disabled" : "")>Verstuur</button>
            </form>
        </div>
        <div class="html-panel">
            <iframe id="htmlOutputFrame" class="html-iframe" title="Gegenereerde HTML"></iframe>
            <div id="loadingOverlay" class="loading-overlay" style="display:none;">
                <div class="spinner"></div>
            </div>
        </div>
    </div>
    
    <script>
        // Chat/HTML logic
        const chatHistory = [];
        const chatHistoryDiv = document.getElementById('chatHistory');
        const htmlOutputFrame = document.getElementById('htmlOutputFrame');
        const chatForm = document.getElementById('chatForm');
        const chatMessage = document.getElementById('chatMessage');
        const loadingOverlay = document.getElementById('loadingOverlay');
        const remainingGenerations = @Model.RemainingGenerations;
        const requireAuth = @Json.Serialize(Model.RequireAuthentication);

        function renderChat() {
            chatHistoryDiv.innerHTML = chatHistory.map(m => `<div><b>${m.role === 'user' ? 'Jij' : 'AI'}:</b> ${m.text}</div>`).join('');
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
        }

        function setIframeHtml(html) {
            const doc = htmlOutputFrame.contentDocument || htmlOutputFrame.contentWindow.document;
            doc.open();
            doc.write(html);
            doc.close();
        }

        function setLoading(isLoading) {
            if (isLoading) {
                htmlOutputFrame.classList.add('loading');
                loadingOverlay.style.display = '';
            } else {
                htmlOutputFrame.classList.remove('loading');
                loadingOverlay.style.display = 'none';
            }
        }

        chatForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const text = chatMessage.value.trim();
            if (!text) return;
            
            if (requireAuth && remainingGenerations <= 0) {
                alert('Je hebt je dagelijkse limiet van 10 pagina\'s bereikt. Probeer het morgen opnieuw.');
                return;
            }
            
            chatHistory.push({ role: 'user', text });
            renderChat();
            chatMessage.value = '';
            setLoading(true);
            
            // Bouw DevGPTChatMessage lijst
            const messages = chatHistory.map(m => ({
                MessageId: crypto.randomUUID(),
                Role: { Role: m.role },
                Text: m.text,
                AgentName: '',
                FunctionName: '',
                FlowName: '',
                Response: ''
            }));
            
            const params = new URLSearchParams();
            params.append('ChatHistoryJson', JSON.stringify(messages));

            const response = await fetch('/Index?handler=GenerateHtml', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: params
            });

            if (!response.ok) {
                setIframeHtml(`<div style='color:red'>Fout: ${response.status} ${response.statusText}</div>`);
                setLoading(false);
                return;
            }

            const data = await response.json();
            setIframeHtml(data.html);
            setLoading(false);
            chatHistory.push({ role: 'assistant', text: '[HTML gegenereerd]' });
            renderChat();
            
            // Reload page to update generation count (only if auth is required)
            if (requireAuth) {
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }
        });
    </script>
}
