@page
@model IndexModel
@{
    ViewData["Title"] = "HTML Mockup Generator";
}
<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    .main-content {
        flex: 1 1 auto;
        display: flex;
        min-height: 0;
        height: 100%;
        overflow: hidden;
    }
    .chat-panel {
        width: 100%;
        max-width: 300px;
        min-width: 200px;
        border-right: 1px solid #ccc;
        background: #fff;
        padding: 0;
        display: flex;
        flex-direction: column;
        height: 100%;
        align-items: flex-start;
    }
    .chat-history {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        margin-bottom: 0.5rem;
        width: 100%;
    }
    .chat-input {
        display: flex;
        padding: 0.5rem 1rem 1rem 1rem;
        background: #fff;
        width: 100%;
    }
    .chat-input textarea {
        flex: 1;
        resize: none;
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 0.5rem;
        font-size: 1rem;
    }
    .chat-input button {
        margin-left: 0.5rem;
        padding: 0.5rem 1rem;
        font-size: 1rem;
        border: none;
        background: #222;
        color: #fff;
        border-radius: 4px;
        cursor: pointer;
        transition: background 0.2s;
    }
    .chat-input button:hover {
        background: #444;
    }
    .html-panel {
        flex: 1;
        height: 100%;
        min-width: 0;
        padding: 0;
        background: #f9f9f9;
        display: flex;
    }
    .html-iframe {
        border: none;
        width: 100%;
        height: 100%;
        background: #fff;
    }
    @@media (max-width: 900px) {
        .chat-panel { max-width: 200px; }
    }
    @@media (max-width: 700px) {
        .main-content {
            flex-direction: column;
        }
        .chat-panel {
            width: 100%;
            max-width: none;
            min-width: 0;
            border-right: none;
            border-bottom: 1px solid #ccc;
            height: auto;
            max-height: 50vh;
        }
        .html-panel {
            min-height: 50vh;
        }
    }
    @@media (max-width: 600px) {
        .main-content {
            flex-direction: column;
            height: 100%;
        }
        .chat-panel {
            width: 100%;
            max-width: none;
            min-width: 0;
            border-right: none;
            border-bottom: 1px solid #ccc;
            height: auto;
            max-height: none;
        }
        .html-panel {
            min-height: 0;
            height: 100%;
            padding: 0;
        }
    }
</style>
<div class="main-content">
    <div class="chat-panel">
        <div class="chat-history" id="chatHistory"></div>
        <form class="chat-input" id="chatForm" autocomplete="off">
            <textarea id="chatMessage" rows="2" placeholder="Typ een bericht..."></textarea>
            <button type="submit">Verstuur</button>
        </form>
    </div>
    <div class="html-panel">
        <iframe id="htmlOutputFrame" class="html-iframe" title="Gegenereerde HTML"></iframe>
    </div>
</div>
<script>
    // Chat/HTML logic
    const chatHistory = [];
    const chatHistoryDiv = document.getElementById('chatHistory');
    const htmlOutputFrame = document.getElementById('htmlOutputFrame');
    const chatForm = document.getElementById('chatForm');
    const chatMessage = document.getElementById('chatMessage');

    function renderChat() {
        chatHistoryDiv.innerHTML = chatHistory.map(m => `<div><b>${m.role === 'user' ? 'Jij' : 'AI'}:</b> ${m.text}</div>`).join('');
        chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
    }

    function setIframeHtml(html) {
        const doc = htmlOutputFrame.contentDocument || htmlOutputFrame.contentWindow.document;
        doc.open();
        doc.write(html);
        doc.close();
    }

    chatForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const text = chatMessage.value.trim();
        if (!text) return;
        chatHistory.push({ role: 'user', text });
        renderChat();
        chatMessage.value = '';
        setIframeHtml('<em>HTML genereren...</em>');
        // Bouw DevGPTChatMessage lijst
        const messages = chatHistory.map(m => ({
            MessageId: crypto.randomUUID(),
            Role: { Role: m.role },
            Text: m.text,
            AgentName: '',
            FunctionName: '',
            FlowName: '',
            Response: ''
        }));
        
        const params = new URLSearchParams();
        params.append('ChatHistoryJson', JSON.stringify(messages));

        const response = await fetch('/Index?handler=GenerateHtml', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: params
        });

        if (!response.ok) {
            setIframeHtml(`<div style='color:red'>Fout: ${response.status} ${response.statusText}</div>`);
            return;
        }

        const data = await response.json();
        setIframeHtml(data.html);
        chatHistory.push({ role: 'assistant', text: '[HTML gegenereerd]' });
        renderChat();
    });
</script>
