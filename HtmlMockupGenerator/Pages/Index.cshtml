@page
@model IndexModel
@{
    ViewData["Title"] = "HTML Mockup Generator";
}
<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    body {
        min-height: 100vh;
        height: 100vh;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        font-family: 'Segoe UI', Arial, sans-serif;
        background: #f4f4f4;
    }
    .header {
        height: 48px;
        background: #222;
        color: #fff;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0 1.5rem;
        position: relative;
        z-index: 10;
    }
    .header .logo {
        font-weight: bold;
        font-size: 1.2rem;
        letter-spacing: 1px;
    }
    .header nav {
        display: flex;
        gap: 1.5rem;
    }
    .header nav a {
        color: #fff;
        text-decoration: none;
        font-size: 1rem;
        transition: color 0.2s;
    }
    .header nav a:hover {
        color: #ffb347;
    }
    .menu-icon {
        display: none;
        font-size: 2rem;
        cursor: pointer;
        position: absolute;
        right: 1.5rem;
        top: 8px;
    }
    .main-content {
        flex: 1 1 auto;
        display: flex;
        min-height: 0;
        height: 100%;
        overflow: hidden;
    }
    .chat-panel {
        width: 350px;
        min-width: 250px;
        max-width: 400px;
        border-right: 1px solid #ccc;
        background: #fff;
        padding: 0;
        display: flex;
        flex-direction: column;
        height: 100%;
    }
    .chat-history {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        margin-bottom: 0.5rem;
    }
    .chat-input {
        display: flex;
        padding: 0.5rem 1rem 1rem 1rem;
        background: #fff;
    }
    .chat-input textarea {
        flex: 1;
        resize: none;
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 0.5rem;
        font-size: 1rem;
    }
    .chat-input button {
        margin-left: 0.5rem;
        padding: 0.5rem 1rem;
        font-size: 1rem;
        border: none;
        background: #222;
        color: #fff;
        border-radius: 4px;
        cursor: pointer;
        transition: background 0.2s;
    }
    .chat-input button:hover {
        background: #444;
    }
    .html-panel {
        flex: 1;
        padding: 2rem;
        background: #f9f9f9;
        overflow: auto;
        height: 100%;
        min-width: 0;
    }
    .footer {
        height: 36px;
        background: #222;
        color: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.95rem;
        letter-spacing: 0.5px;
    }
    @@media (max-width: 900px) {
        .chat-panel { width: 200px; }
    }
    @@media (max-width: 700px) {
        .main-content {
            flex-direction: column;
        }
        .chat-panel {
            width: 100%;
            max-width: none;
            min-width: 0;
            border-right: none;
            border-bottom: 1px solid #ccc;
            height: auto;
            max-height: 50vh;
        }
        .html-panel {
            padding: 1rem;
            min-height: 50vh;
        }
    }
    @@media (max-width: 600px) {
        .header nav {
            display: none;
        }
        .menu-icon {
            display: block;
        }
        .header.open nav {
            display: flex;
            flex-direction: column;
            position: absolute;
            right: 0;
            top: 48px;
            background: #222;
            width: 150px;
            border-radius: 0 0 8px 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
            z-index: 100;
        }
        .header.open nav a {
            padding: 1rem;
            border-bottom: 1px solid #333;
        }
        .main-content {
            flex-direction: column;
            height: 100%;
        }
        .chat-panel {
            width: 100%;
            max-width: none;
            min-width: 0;
            border-right: none;
            border-bottom: 1px solid #ccc;
            height: auto;
            max-height: none;
        }
        .html-panel {
            min-height: 0;
            height: 100%;
            padding: 0.5rem;
        }
    }
</style>
<div class="header" id="header">
    <span class="logo">HTML Mockup Generator</span>
    <span class="menu-icon" id="menuIcon">&#9776;</span>
    <nav>
        <a href="/">Home</a>
        <a href="/about">About</a>
    </nav>
</div>
<div class="main-content">
    <div class="chat-panel">
        <div class="chat-history" id="chatHistory"></div>
        <form class="chat-input" id="chatForm" autocomplete="off">
            <textarea id="chatMessage" rows="2" placeholder="Typ een bericht..."></textarea>
            <button type="submit">Verstuur</button>
        </form>
    </div>
    <div class="html-panel">
        <div id="htmlOutput">Voer een bericht in om HTML te genereren.</div>
    </div>
</div>
<div class="footer">
    &copy; @(DateTime.Now.Year) HTML Mockup Generator
</div>
<script>
    // Responsive menu
    const header = document.getElementById('header');
    const menuIcon = document.getElementById('menuIcon');
    menuIcon.addEventListener('click', function() {
        header.classList.toggle('open');
    });
    document.addEventListener('click', function(e) {
        if (!header.contains(e.target) && header.classList.contains('open')) {
            header.classList.remove('open');
        }
    });

    // Chat/HTML logic
    const chatHistory = [];
    const chatHistoryDiv = document.getElementById('chatHistory');
    const htmlOutputDiv = document.getElementById('htmlOutput');
    const chatForm = document.getElementById('chatForm');
    const chatMessage = document.getElementById('chatMessage');

    function renderChat() {
        chatHistoryDiv.innerHTML = chatHistory.map(m => `<div><b>${m.role === 'user' ? 'Jij' : 'AI'}:</b> ${m.text}</div>`).join('');
        chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
    }

    chatForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const text = chatMessage.value.trim();
        if (!text) return;
        chatHistory.push({ role: 'user', text });
        renderChat();
        chatMessage.value = '';
        htmlOutputDiv.innerHTML = '<em>HTML genereren...</em>';
        // Bouw DevGPTChatMessage lijst
        const messages = chatHistory.map(m => ({
            MessageId: crypto.randomUUID(),
            Role: { Role: m.role },
            Text: m.text,
            AgentName: '',
            FunctionName: '',
            FlowName: '',
            Response: ''
        }));
        
        const params = new URLSearchParams();
        params.append('ChatHistoryJson', JSON.stringify(messages));

        const response = await fetch('/Index?handler=GenerateHtml', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: params
        });

        if (!response.ok) {
            htmlOutputDiv.innerHTML = `<div style='color:red'>Fout: ${response.status} ${response.statusText}</div>`;
            return;
        }

        const data = await response.json();
        htmlOutputDiv.innerHTML = data.html;
        chatHistory.push({ role: 'assistant', text: '[HTML gegenereerd]' });
        renderChat();
    });
</script>
